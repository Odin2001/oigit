# NOTE : oigit_getIniValue has a 1024 char limit so if you need a big config point to a control file

# default values are given within parenthesis

# manually select which ini file by using the -ini= argument to oigit
# the default is oigit.ini in the folder defined in the oigit batch file

# CONTROL determines which section has the main body of the configuration and can be used to quickly switch between repositories
# manually select which control section to use by passing the -cs= argument to oigit
# if you don't specify a value for CONTROL_SECTION either on the command line or in the CONTROL section the default value is OIGIT
[CONTROL]
#CONTROL_SECTION=OIGIT
#CONTROL_SECTION=SWAG
CONTROL_SECTION=OIGIT-SUITE

[OIGIT]
	# use redirect to send all ini queries to a different file
	# using redirect will ignore all instructions in this ini file and continue reading setting from the specified one
	# this allows common sections (such as backup and export) to be specified for each control section individually
	# don't specify REDIRECT and all further settings will be taken from this ini file
	# the default value is to not redirect to another ini file
REDIRECT=oigit.config\oigit.ini

	# GITDIR directory where the git repository is held (C:\GIT)
GITDIR=c:\REPOSITORIES\OI
	# OUTPUTFILE returns the results from the oigit process for when the connector can't interpret the results directly (C:\temp\oigit.txt)
OUTPUTFILE=C:\TEMP\oigit.txt
	# ACCOUNTS is the list of accounts to include in the repository search. This is combined with the [<CONTROL_SECTION>_CLASSES] section to define which classes will be included (SYSPROG)
ACCOUNTS=SWAG,SYSPROG
	# SKIPITEM list of specific items to be skipped (regex match)
SKIPITEM=oigit.config\oigitskipitems.txt
	# INCLUDEITEM list of specific items to be included (regex match), fires after SKIPITEM
INCLUDEITEM=oigit.config\oigitincludeitems.txt
	# SKIPREPOS list of repository items to skip (partial match) 
SKIPREPOS=oigit.config\oigitskiprepos.txt
	# INCLUDEREPOS list of repository items to include (partial match) 
INCLUDEREPOS=oigit.config\oigitincluderepos.txt
	# SKIPDICT list of dictionary tables to be ignored
SKIPDICT=oigit.config\OIGITdictignore.txt
	# NODICT how to handle dictionaries (0 = include all items, 1 = exclude all items, DATA = symbolics and %FIELDS%, FIELDS) (0)
NODICT=0
	# the list of accounts for which dictionaries should be source controlled (GLOBAL,SYSPROG)
DICTACCOUNTS=GLOBAL,SYSPROG
	# FIELDEXCLUDE points to a file which excludes a list of fields in certain records from comparison
FIELDEXCLUDE=oigit.config\OIGITfieldExclude.txt
	# INCLUDETABLES list of standing data tables to track
	# really important to set the DISABLEREMOVEENTITIES=PARTIAL and KEEPENTITIESFROMTABLES for live/test environments
INCLUDETABLES=oigit.config\includetables.txt
	# DEBUG report DEBUG in objects (WARN to show in warning list, otherwise ignore) (IGNORE)
DEBUG=WARN
	# DISABLEREMOVEENTITIES stops oigit from deleting things that don't exist on the target. For instance if doing a tooi
	# any item that doesn't exist on git but does exist in OI will be deleted from OI. Set this to 1 to keep.
	# new flag PARTIAL to allow a list of tables for such as a live situation where the tables are routinely changed outside of source control by
	# users such as the events (0)
	# NOTE: be aware though that git may track these things and think they are to be included as changes on the branch
DISABLEREMOVEENTITIES=0
	# KEEPENTITIESFROMTABLES is the list of tables to not delete from if the PARTIAL flag is used for DISABLEREMOVEENTITIES when switching branches and the objects 
	# in that table no longer exist.
	# NOTE: as mentioned for DISABLEREMOVEENTITIES entities from these tables will be tracked when committing on every branch as git will think they are new
	# again and again. This is branch pollution and will be a problem with merges as git may think both branches have changed. This can only be "fixed" by getting
	# these non-tracked items into the live branch so that downstream merges into active branches establish a latest version. The biggest issue is that entities 
	# changed again outside of source control may have their changes lost to the SC version by being overwritten as the branch version will always take precedence
	# This means that the backup is potentially very important. (0)
#KEEPENTITIESFROMTABLES=TABLE1,TABLE2
	# FOLDERKEYS points to keys in the [FOLDERS] section
#FOLDERKEYS=DOCS,JS
	# SET_RELOAD_FLAG determines whether to call the reload program automatically when doing a tooi transfer so that the system caches are flushed and start running the new software
	# remember other systems such as the scheduler and order processor will require a manual restart ("")
#SET_RELOAD_FLAG=RELOAD_PROGRAM
	# RELOAD_PREVENTING_ENTITIES is the list of programs which if changed would prevent a reload from being issued. This is so that engines can be recycled as otherwise there would be unpredicable behaviour
#RELOAD_PREVENTING_ENTITIES=oigit.config\noreload_programs.txt
	# ATTACH points to a file with a list of volumes and their accounts to be attached. The format is path*tablelist*account
ATTACH=oigit.config\attach.txt


# OIGIT_CLASSES defines the classes for the SWAG control section and must detail all accounts mentioned in the ACCOUNTS list
# use ALL to select all classes
[OIGIT_CLASSES]
SWAG=ALL
SYSPROG=APPROW,DLL,STPROCEXE,STPROC


[SWAG]
GITDIR=c:\REPOSITORIES\SWAG
OUTPUTFILE=C:\TEMP\oigit.txt
ACCOUNTS=SWAG
ATTACH=SWAG.config\attach.txt
DEBUG=WARN
INCLUDETABLES=SWAG.config\includetables.txt


[SWAG_CLASSES]
SWAG=ALL



# FOLDERS defines the paths to each of the FOLDERKEYS values
[FOLDERS]
#DOCS=C:\LOCALDOCS
#JS=C:\inetpub\wwwroot\js


# In some badly configured systems records other than standing data can be placed in a table. In the situation where there is another table with related records and the same key
# use this alternative table to retrieve the key list thereby avoiding the temporary keys in TABLE1
[SUBSTITUTIONS]
#TABLE1=TABLE_WITH_KEYS


# this is the section for oigit programs and the oigit repository
[OIGIT-SUITE]
	# GITDIR directory where the git repository is held
GITDIR=c:\REPOSITORIES\OIGIT
	# SKIPITEM list of specific items to be skipped (regex match)
SKIPITEM=oigit.oigit\oigitskipitems.txt
	# SKIPREPOS list of repository items to skip (partial match) 
SKIPREPOS=oigit.oigit\oigitskiprepos.txt
	# INCLUDEREPOS list of repository items to include (partial match) 
INCLUDEREPOS=oigit.oigit\oigitincluderepos.txt
INCLUDEITEM=oigit.oigit\oigitincludeitems.txt
INCLUDETABLES=oigit.oigit\includetables.txt
	# SKIPDICT list of dictionary tables to be ignored
SKIPDICT=OIGITdictignore.txt
	# NODICT how to handle dictionaries (0 = include all items, 1 = exclude all items, DATA = symbolics and %FIELDS%, FIELDS)
NODICT=1
	# INCLUDETABLES list of data tables to track
INCLUDETABLES=
	# DEBUG report DEBUG in objects (WARN to show in warning list, otherwise ignore)
DEBUG=WARN
	# DISABLEREMOVEENTITIES stops oigit from deleting things that don't exist on the target. For instance if doing a tooi
	# any item that doesn't exist on git but does exist in OI will be deleted from OI. Set this to 1 to keep 
	# NOTE: be aware though that git may track these things and think they are to be included as changes on the branch
DISABLEREMOVEENTITIES=1

[OIGIT-SUITE_CLASSES]
SYSPROG=ALL


# saves any source overwritten during an tooi operation (just in case)
[BACKUP]
	# PATH where to store the tooi backups ("")
PATH=c:\DEV\OIGIT_BACKUP
	# BACKUP_METHOD options are LH or DOS, LH stores all items in a (currently) single backup table as specified by FILENAME. DOS will create folders within the PATH for each backup (DOS)
BACKUP_METHOD=DOS
	# FILENAME file to store the tooi backups (OIGIT_BACKUP)
FILENAME=OIGIT_BACKUP
	# The name of the RTP57 volume (OIGIT_BACKUP)
VOLUMENAME=OIGIT_BACKUP
	# KEEP removes anything from KEEP+1 tooi's ago (50)
KEEP=50
	# CLASSES the type of items to store in the tooi backup (STPROC,STPROCINS)
CLASSES=STPROC,STPROCINS,RECORD
	# whenever a new item is created in GIT during a fromoi transfer this flag determines if it should logged to a log file. This is really useful in the cases where a program
	# has been created on a branch which is now stale and not merged into the mainline branch. If you wrote something 6 months ago and need to find it you'll be grateful for this (1)
NEW_ENTITY_LOG=1
	# restrict the new entity logging to specific CLASSES (STPROC)
NEW_ENTITY_LOG_CLASSES=STPROC
	# the log file where the new entities and branches they are on are written (C:\temp\git_new_programs.log)
NEW_ENTITY_LOG_FILENAME=c:\DEV\OIGIT_BACKUP\new_programs.log


# Export is used to export all items identified when performing a 'git diff --name-status'
# reads the entity list from <git location>\merge\diffs.txt
[EXPORT]
	# DRIVE is the base drive, or path to export when using the export option of oigit (C:\TEMP\UPGRADES)
DRIVE=E:
	# FOLDER is the path to add to DRIVE that forms the location of the export (\)
FOLDER=UPGRADES
	# CLASSES is the class selector for what to include in the export from the diff list (STPROC)
CLASSES=STPROC,STPROCINS,RECORD,DICT


[MERGE]
	# DIFFTOOL command to be run in the merge window to show differences
	# any 3 way merge diff tool can be used but p4merge allows you to choose which of the 3 version to choose from
DIFFTOOL='"C:\Program Files\Perforce\p4merge.exe" "$BASE" "$REMOTE" "$LOCAL"'


# uses the filenames but with _TEMP on the end
[TEMPFILES]
	# reads from _TEMP version of the source controled files, useful for testing (0)
READTEMP=0
	# write to _TEMP, means that the "live" database in unaffected (1)
WRITETEMP=1
	# the location of temporary files used instead of the actual files (C:\dev\oi)
VOLUMELOCATION=C:\dev\oi
	# the name of the volume that the temporary files are placed (SOURCE_TEMP)
VOLUMELABEL=SOURCE_TEMP

[SECURITY]
	# REPORT_SOURCE_CHANGES_AFTER_COMPILE controls in which directions the object time check will be performed. The only option is BOTH as all other values disable the check (BOTH)
REPORT_SOURCE_CHANGES_AFTER_COMPILE=BOTH
	# REPORT_SOURCE_CHANGES determines when to warn that source was saved after the latest compilation
	# values are CHANGED and ALL
	# CHANGED only warns when the source has been changed compared to the repository. ALL warns everytime oigit is run (CHANGED)
REPORT_SOURCE_CHANGES=CHANGED

[INFO]
	# LOG_TIMINGS is the filename to write how long it takes to perform each part of the oigit call (no logging)
LOG_TIMINGS=c:\timings\timings.log
	# LOG_SKIPPED is the filename to write the list of items that were skipped as defined by the skipping configuration (no logging)
LOG_SKIPPED=c:\timings\skipped.log
