# NOTE : oigit_getIniValue has a 1024 char limit so if you need a big config point to a control file

# this section to backup just oigit programs 
[OIGIT-SUITE]
	# GITDIR directory where the git repository is held
GITDIR=c:\REPOSITORIES\OIGIT
	# SKIPITEM list of specific items to be skipped (regex match)
SKIPITEM=oigit.oigit\oigitskipitems.txt
	# SKIPREPOS list of repository items to skip (partial match) 
SKIPREPOS=oigit.oigit\oigitskiprepos.txt
	# INCLUDEREPOS list of repository items to include (partial match) 
INCLUDEREPOS=oigit.oigit\oigitincluderepos.txt
INCLUDEITEM=oigit.oigit\oigitincludeitems.txt
INCLUDETABLES=oigit.oigit\includetables.txt
	# SKIPDICT list of dictionary tables to be ignored
SKIPDICT=OIGITdictignore.txt
	# NODICT how to handle dictionaries (0 = include all items, 1 = exclude all items, DATA = symbolics and %FIELDS%, FIELDS)
NODICT=1
	# INCLUDETABLES list of data tables to track
INCLUDETABLES=
	# DEBUG report DEBUG in objects (WARN to show in warning list, otherwise ignore)
DEBUG=WARN
	# DISABLEREMOVEENTITIES stops oigit from deleting things that don't exist on the target. For instance if doing a tooi
	# any item that doesn't exist on git but does exist in OI will be deleted from OI. Set this to 1 to keep 
	# NOTE: be aware though that git may track these things and think they are to be included as changes on the branch
DISABLEREMOVEENTITIES=0

[OIGIT-SUITE_CLASSES]
SYSPROG=ALL

# saves any source overwritten during an tooi operation (just in case)
[BACKUP]
	# PATH where to store the tooi backups
PATH=c:\DEV\OIGIT_BACKUP
	# BACKUP_METHOD options are LH or DOS, LH stores all items in a (currently) single backup table as specified by FILENAME. DOS will create folders within the PATH for each backup
BACKUP_METHOD=DOS
	# FILENAME file to store the tooi backups
FILENAME=OIGIT_BACKUP
	# The name of the RTP57 volume 
VOLUMENAME=OIGIT_BACKUP
	# KEEP removes anything from KEEP+1 tooi's ago
KEEP=50
	# CLASSES the type of items to store in the tooi backup
CLASSES=STPROC,STPROCINS,RECORD
	# whenever a new item is created in GIT during a fromoi transfer this flag determines if it should logged to a log file. This is really useful in the cases where a program
	# has been created on a branch which is now stale and not merged into the mainline branch. If you wrote something 6 months ago and need to find it you'll be grateful for this
NEW_ENTITY_LOG=1
	# restrict the new entity logging to specific CLASSES, STPROC is the default
NEW_ENTITY_LOG_CLASSES=STPROC
	# the log file where the new entities and branches they are on are written
NEW_ENTITY_LOG_FILENAME=c:\DEV\OIGIT_BACKUP\new_programs.log


[EXPORT]
	# DRIVE
DRIVE=C:
	# FOLDER
FOLDER=REVSOFT\UPGRADES
	# CLASSES
CLASSES=STPROC,STPROCINS,RECORD,DICT


[MERGE]
	# DIFFTOOL command to be run in the merge window to show differences
	# any 3 way merge diff tool can be used but p4merge allows you to choose which of the 3 version to choose from
DIFFTOOL='"C:\Program Files\Perforce\p4merge.exe" "$BASE" "$REMOTE" "$LOCAL"'


# uses the filenames but with _TEMP on the end
[TEMPFILES]
	# reads from _TEMP version of the source controled files, useful for testing
READTEMP=0
	# write to _TEMP, means that the "live" database in unaffected
WRITETEMP=1
	# the location of temporary files used instead of the actual files
VOLUMELOCATION=C:\dev\oi
	# the name of the volume that the temporary files are placed
VOLUMELABEL=SOURCE_TEMP

